{
    "description_xss": "An XSS attack, or Cross-Site Scripting, is a type of computer attack where a hacker injects malicious code, usually JavaScript, into a website. This code is then executed on the browsers of users visiting the compromised site, enabling the hacker to steal personal information, take control of user accounts, or redirect users to malicious sites. XSS attacks exploit vulnerabilities in web applications, often by manipulating input fields or other interactive fields.",
    "corrections": [
        {
            "type": "escape",
            "description_vuln": "In your line of code, there is an opportunity for a user to insert malicious code. To prevent this threat, we recommend using the escape() function, which escapes malicious special characters. Applying this security measure ensures that user input is processed securely, minimising the risk of malicious code being injected into the system.",
            "code": [
                {
                    "extension": ".js, .ts, .jsx, .tsx",
                    "example_code": " import escape from 'lodash.escape';\nconst escapedString = escape($VariableYouWantToDisplay); \nconsole.log(escapedString);"
                },
                {
                    "extension": ".php, .phtml, .php3, .php4, .php5, .php7, .php8",
                    "example_code": "import html \nescaped_string = html.escape($VariableYouWantToDisplay)\nprint(escaped_string)"
                }
            ]
        },
        {
            "type": "input_validation",
            "description_vuln": "In your line of code, there is an opportunity for a user to insert malicious code. To prevent this threat, we recommend using input validation, which checks user input to ensure that it is valid. Applying this security measure ensures that user input is processed securely, minimising the risk of malicious code being injected into the system.",
            "code": [
                {
                    "extension": ".js, .ts, .jsx, .tsx",
                    "list_validators" : 
                    [
                        {
                            "validator_type": "email",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isEmail($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        },
                        {
                            "validator_type": "date",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isDate($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "ascii",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isAscii($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "base32",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isBase32($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "base64",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isBase64($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "boolean",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isBoolean($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "creditCard",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isCreditCard($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "currency",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isCurrency($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "dataURI",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isDataURI($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "decimal",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isDecimal($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "divisibleBy",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isDivisibleBy($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "FQDN",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isFQDN($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }, 
                        {
                            "name": "float",
                            "example_code": "import validator from 'validator';\nconst isValid = validator.isFloat($VariableYouWantToDisplay);\nconsole.log(isValid);"
                        }
                    ]
                },
                {
                    "extension": ".php, .phtml, .php3, .php4, .php5, .php7, .php8",
                    "list_validators" : 
                    [
                        {
                            "validator_type": "date",
                            "example_code": "$date = '2022-01-01';\nif (filter_var($date, FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^\\d{4}-\\d{2}-\\d{2}$/')))) \n{echo 'Valid date format';} \nelse {\necho 'Invalid date format';}"
                        }, 
                        {
                            "validator_type": "email",
                            "example_code" : "$email = 'test@example.com';\nif (filter_var($email, FILTER_VALIDATE_EMAIL)) \n{echo 'Valid email format';} \nelse {\necho 'Invalid email format';}"
                        }, 
                        {
                            "validator_type": "ascii",
                            "example_code" : "$asciiString = 'Hello123';\nif (filter_var($asciiString, FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^[\\x20-\\x7E]+$/')))) {\necho 'Valid ASCII string';} \nelse {\necho 'Invalid ASCII string';}"
                        }, 
                        {
                            "validator_type": "creditCard", 
                            "example_code" : "$creditCardNumber  = '1234567890123456';\nif (filter_var($creditCardNumber, FILTER_VALIDATE_REGEXP, array('options' => array('regexp' => '/^\\d{13,19}$/')))) {\necho 'Valid credit card number';} \nelse {\necho 'Invalid credit card number';}"
                        }, 
                        {
                            "validator_type": "domain",
                            "example_code" : "$domain = 'example.com';\nif (filter_var($domain, FILTER_VALIDATE_DOMAIN)) {\necho 'Valid domain';} \nelse {\necho 'Invalid domain';}"
                        }, 
                        {
                            "validator_type": "float",
                            "example_code" : "$float = '123.45';\nif (filter_var($float, FILTER_VALIDATE_FLOAT)) {\necho 'Valid float';} \nelse {\necho 'Invalid float';}"
                        }, 
                        {
                            "validator_type": "int",
                            "example_code" : "$int = '123';\nif (filter_var($int, FILTER_VALIDATE_INT)) {\necho 'Valid integer';} \nelse {\necho 'Invalid integer';}"
                        }
                    ]   

                }
            ]
        }, 
        {
            "type": "CSP_configuration",
            "description_vuln": "Implementing a Content Security Policy (CSP) is crucial for enhancing user security by guarding against Cross-Site Scripting (XSS) attacks. By defining a CSP, developers rigorously specify authorized sources for scripts, significantly reducing the risks of malicious injections. The recommended line dictates that only resources from the same site ('self') are allowed by default, confining scripts to local sources and preventing the execution of unauthorized code. This fosters a safer web environment, shielding users from XSS threats.",
            "code": "<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n<meta charset='UTF-8'>\n<meta http-equiv='Content-Security-Policy' content=\"default-src 'self'; script-src 'self';\">"
        }
    ]
}